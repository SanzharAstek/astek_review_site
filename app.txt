from flask import Flask, render_template, request, redirect, url_for
import psycopg2
import os
import requests
from datetime import datetime

app = Flask(__name__)

# –ë–µ—Ä–µ–º URL –±–∞–∑—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
DATABASE_URL = os.getenv("DATABASE_URL")
MAKE_WEBHOOK_URL = "https://hook.eu2.make.com/tsa723t5kj74hvay3h4hrof9ol9tfo4g"  # –í—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ Webhook –∏–∑ Make

if not DATABASE_URL:
    raise ValueError("–û—à–∏–±–∫–∞: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL!")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ PostgreSQL
def get_db_connection():
    return psycopg2.connect(DATABASE_URL, sslmode="require")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with get_db_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS reviews (
                    id SERIAL PRIMARY KEY,
                    name TEXT,
                    specialist TEXT,
                    city TEXT,
                    rating INTEGER,
                    review TEXT
                )
            ''')
            conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞ –≤ Make (Google Sheets)
def send_to_make(name, specialist, city, rating, review):
    data = {
        "name": name,
        "specialist": specialist,
        "city": city,
        "rating": rating,
        "review": review,
        "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É
    }
    try:
        response = requests.post(MAKE_WEBHOOK_URL, json=data)
        response.raise_for_status()
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Make!")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Make: {e}")

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route('/')
def index():
    return render_template('index.html')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
@app.route('/submit_review', methods=['POST'])
def submit_review():
    name = request.form.get('name')
    specialist = request.form.get('specialist')
    city = request.form.get('city')
    rating = request.form.get('rating')
    review = request.form.get('review')

    print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {name}, {specialist}, {city}, {rating}, {review}")  # –û—Ç–ª–∞–¥–∫–∞

    if name and review:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        try:
            with get_db_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute(
                        "INSERT INTO reviews (name, specialist, city, rating, review) VALUES (%s, %s, %s, %s, %s)",
                        (name, specialist, city, rating, review)
                    )
                    conn.commit()
                    print("‚úÖ –û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É!")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets —á–µ—Ä–µ–∑ Make
            send_to_make(name, specialist, city, rating, review)

        except Exception as e:
            with open("error_log.txt", "a", encoding="utf-8") as log:
                log.write(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}\n")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")

    return redirect(url_for('index'))

if __name__ == '__main__':
    init_db()  # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    print(f"üîó –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DATABASE_URL}")
    port = int(os.environ.get("PORT", 5000))  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –æ—Ç Render –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 5000
    app.run(host="0.0.0.0", port=port, debug=False)


